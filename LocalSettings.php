<?php
# This file was automatically generated by the MediaWiki 1.42.1
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/MainConfigSchema.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}


require_once "/home/users/tonymm81/sites/tonymm81.kapsi.fi/external_includes/mysql_pw.php";

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = 'koodariverstas proto';
$wgMetaNamespace = 'Koodariverstas_proto';

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = '/mediawiki';

## The protocol and server name to use in fully-qualified URLs
$wgServer = 'https://tonymm81.kapsi.fi';

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [
	'1x' => "$wgResourceBasePath/resources/assets/change-your-logo.svg",
	'icon' => "$wgResourceBasePath/resources/assets/change-your-logo.svg",
];

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = '';
$wgPasswordSender = '';

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = 'mysql';


# MySQL specific settings
$wgDBprefix = "wiki_";
$wgDBssl = false;

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = false;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = '/usr/bin/convert';

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = true;

# Site language code, should be one of the list in ./includes/languages/data/Names.php
$wgLanguageCode = 'en';

# Time zone
$wgLocaltimezone = 'Europe/Helsinki';

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

$wgSecretKey = '34b11488c06a16bb313cd501a86d6c2bb6d01a40ec1554707e1e11d07e1dab63';

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = '1';

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = 'fd07f3eeb54670a8';

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = 'https://creativecommons.org/licenses/by-nc-sa/4.0/';
$wgRightsText = 'Creative Commons Attribution-NonCommercial-ShareAlike';
$wgRightsIcon = "$wgResourceBasePath/resources/assets/licenses/cc-by-nc-sa.png";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = '/usr/bin/diff3';

# The following permissions were set based on your choice in the installer
$wgGroupPermissions['*']['createaccount'] = false;
$wgGroupPermissions['*']['edit'] = false;
$wgGroupPermissions['*']['createpage'] = false;
$wgGroupPermissions['*']['read'] = true;
## Default skin: you can change the default skin. Use the internal symbolic
## names, e.g. 'vector' or 'monobook':
$wgDefaultSkin = "Tweeki";

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );
wfLoadSkin( 'Tweeki' );

# Enabled extensions. Most of the extensions are enabled by adding
# wfLoadExtension( 'ExtensionName' );
# to LocalSettings.php. Check specific extension documentation for more details.
# The following extensions were automatically enabled:
wfLoadExtension( 'AbuseFilter' );
wfLoadExtension( 'CategoryTree' );
wfLoadExtension( 'Cite' );
wfLoadExtension( 'CiteThisPage' );
wfLoadExtension( 'CodeEditor' );
wfLoadExtension( 'ConfirmEdit' );
wfLoadExtension( 'DiscussionTools' );
wfLoadExtension( 'Echo' );
wfLoadExtension( 'Gadgets' );
wfLoadExtension( 'ImageMap' );
wfLoadExtension( 'InputBox' );
wfLoadExtension( 'Interwiki' );
wfLoadExtension( 'Linter' );
wfLoadExtension( 'LoginNotify' );
wfLoadExtension( 'Math' );
wfLoadExtension( 'MultimediaViewer' );
wfLoadExtension( 'Nuke' );
wfLoadExtension( 'OATHAuth' );
wfLoadExtension( 'PageImages' );
wfLoadExtension( 'ParserFunctions' );
wfLoadExtension( 'PdfHandler' );
wfLoadExtension( 'Poem' );
wfLoadExtension( 'ReplaceText' );
wfLoadExtension( 'Scribunto' );
wfLoadExtension( 'SecureLinkFixer' );
wfLoadExtension( 'SpamBlacklist' );
wfLoadExtension( 'SyntaxHighlight_GeSHi' );
wfLoadExtension( 'TemplateData' );
wfLoadExtension( 'TextExtracts' );
wfLoadExtension( 'Thanks' );
wfLoadExtension( 'TitleBlacklist' );
wfLoadExtension( 'VisualEditor' );
wfLoadExtension( 'WikiEditor' );
wfLoadExtension( 'TreeAndMenu' );
wfLoadExtension( 'PageForms' );#testing forms
$wgGroupPermissions['sysop']['viewedittab'] = true;#testing forms
$wgPageFormsLinkAllRedLinksToForms = true;#tämä ohjaa linkin kautta luodut uudet sivut Formsvulle, josta sivupohjan saa valita
$wgPageFormsLinkAllRedLinksToFormsDefaultForm = 'MainForm';#tämä ohjaa linkin kautta luodut uudet sivut Formsvulle, josta sivupohjan saa valita

wfLoadExtension( 'CreatePage' ); # tätä laajennusta tarvitaan, jos uusi sivu luodaan muuta kautta, kuin linkistä.
$wgHooks['SpecialPageBeforeExecute'][] = function ( $special, $subPage ) { # tämä koukku ohjaa myös muuta reittiä luodut uudet sivut mainform sivulle, josta saa sivupohjan valitua
    if ( $special->getName() === 'Search' && $subPage === 'CreatePage' ) {
        $title = Title::newFromText( 'MainForm' );
        $special->getOutput()->redirect( $title->getFullURL() );
        return false;
    }
    return true;
};

# End of automatically generated settings.
# Add more configuration options below.

$wgTweekiSkinUseBootstrap4 = true;
#$wgDevelopmentWarnings = true;
#$wgDebugLogFile = "./debug.log";#delete this when upload this to server
#$wgDebugToolbar = true;
$wgBootstrapComponentsWhitelist = true;
$wgShowExceptionDetails = true;
$wgTweekiSkinUseBootstrapTheme = true;

$wgVisualEditorSupportedSkins[] = 'tweeki';

$wgTweekiSkinGridBoth = [
    "leftoffset" => 0, 
    "leftwidth" => 2, 
    "mainoffset" => 0, 
    "mainwidth" => 8, 
    "rightoffset" => 0, 
    "rightwidth" => 2 
   ];
   


$wgDefaultUserOptions['tweeki-advanced'] = 1;

$wgBrowserPath = 'mediawiki'; #muuta tämä, niin linkit toimii. Siis wikin kansion nimi. Palvelimella "wiki" ja paikallisella "MediaWikiNew"
# projektin alussa kategoriat diviin
# programmers beginning menu div
$wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'bProgrammersDiv', 'bProgrammersmenu' );
    return true;
};

function bProgrammersmenu( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);

    if ($mysqli->connect_error) {
        die("Connection error " . $mysqli->connect_error);
    }

    $category = 'BProgrammers';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
                              JOIN wiki_page ON cl_from = page_id 
                              WHERE cl_to = ? AND page_title NOT LIKE 'BeginningProjectProgrammers%' AND page_title NOT LIKE 'B_P_P%'");
    if (!$stmt) {
        return '<div id="bProgrammersDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }

    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();

    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>No results.</li>";
    }

    $stmt->close();
    $mysqli->close();

    return '<div id="bProgrammersDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
}



# projektin alussa kategoriat diviin
# designers
$wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'bDesignersDiv', 'BeginDesigners' );
    return true;
};

function BeginDesigners( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);

    if ($mysqli->connect_error) {
        die("Connection error " . $mysqli->connect_error);
    }

    $category = 'BDesigners';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
                              JOIN wiki_page ON cl_from = page_id 
                              WHERE cl_to = ? AND page_title NOT LIKE 'Beginning_Project_Designerss%' AND page_title NOT LIKE 'B_P_D%'");
    if (!$stmt) {
        return '<div id="bDesignersDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }
    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();

    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>No results.</li>";
    }

    $stmt->close();
    $mysqli->close();

    return '<div id="bDesignersDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
}

# projektin alussa kategoriat diviin
# managers
$wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'bManagersDiv', 'BeginManagers' );
    return true;
};

function BeginManagers( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);

    if ($mysqli->connect_error) {
        die("Connection error " . $mysqli->connect_error);
    }

    $category = 'BManagers';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
    JOIN wiki_page ON cl_from = page_id 
    WHERE cl_to = ? AND page_title NOT LIKE 'Beginning_Project_Managers%' AND page_title NOT LIKE 'B_P_M%'");
    if (!$stmt) {
    return '<div id="bManagersDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }
    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();

    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>No results.</li>";
    }

    $stmt->close();
    $mysqli->close();

    return '<div id="bManagersDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
}

# during the project
# programmers
$wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'dProgrammersDiv', 'duringProgrammersmenu' );
    return true;
};

function duringProgrammersmenu( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);

    if ($mysqli->connect_error) {
        die("Connection error " . $mysqli->connect_error);
    }

    $category = 'DProgrammers';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
    JOIN wiki_page ON cl_from = page_id 
    WHERE cl_to = ? AND page_title NOT LIKE 'Working_Project_Programmers%' AND page_title NOT LIKE 'W_P_P%'");
    if (!$stmt) {
    return '<div id="dProgrammersDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }
    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();

    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>No results.</li>";
    }

    $stmt->close();
    $mysqli->close();

    return '<div id="dProgrammersDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
}
 #during project designers
 $wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'dDesignersDiv', 'duringDesignersmenu' );
    return true;
};

function duringDesignersmenu( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);

    if ($mysqli->connect_error) {
        die("Connection error " . $mysqli->connect_error);
    }

    $category = 'DDesigners';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
    JOIN wiki_page ON cl_from = page_id 
    WHERE cl_to = ? AND page_title NOT LIKE 'Working_Project_dESIGNERS%' AND page_title NOT LIKE 'W_P_D%'");
    if (!$stmt) {
    return '<div id="dDesignersDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }
    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();

    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>No results.</li>";
    }

    $stmt->close();
    $mysqli->close();

    return '<div id="dDesignersDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
}

#during the project
#managers
$wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'dManagersDiv', 'duringManagers' );
    return true;
};

function duringManagers( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);

    if ($mysqli->connect_error) {
        die("Connection error " . $mysqli->connect_error);
    }

    $category = 'DManagers';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
    JOIN wiki_page ON cl_from = page_id 
    WHERE cl_to = ? AND page_title NOT LIKE 'Working_Project_Managers%' AND page_title NOT LIKE 'W_P_M%'");
    if (!$stmt) {
    return '<div id="dManagersDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }
    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();

    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>No results.</li>";
    }

    $stmt->close();
    $mysqli->close();

    return '<div id="dManagersDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
}
# project ending
# programmers
$wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'eProgrammersDiv', 'endingProgrammersmenu' );
    return true;
};

function endingProgrammersmenu( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);

    if ($mysqli->connect_error) {
        die("Connection error " . $mysqli->connect_error);
    }

    $category = 'EProgrammers';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
    JOIN wiki_page ON cl_from = page_id 
    WHERE cl_to = ? AND page_title NOT LIKE 'Ending_Project_Programmers%' AND page_title NOT LIKE 'E_P_P%'");
    if (!$stmt) {
        return '<div id="eProgrammersDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }
    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();

    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>No results.</li>";
    }

    $stmt->close();
    $mysqli->close();

    return '<div id="eProgrammersDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
}

# ending project
#designers
$wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'eDesignersDiv', 'endingDesignersmenu' );
    return true;
};

function endingDesignersmenu( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);

    if ($mysqli->connect_error) {
        die("Connection error " . $mysqli->connect_error);
    }

    $category = 'EDesigners';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
    JOIN wiki_page ON cl_from = page_id 
    WHERE cl_to = ? AND page_title NOT LIKE 'Ending_Project_Designers%' AND page_title NOT LIKE 'E_P_D%'");
    if (!$stmt) {
        return '<div id="eDesignersDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }
    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();

    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>No results.</li>";
    }

    $stmt->close();
    $mysqli->close();

    return '<div id="eDesignersDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
}
# ending project 
#managers
$wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'eManagersDiv', 'endingManagers' );
    return true;
};

function endingManagers( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);

    if ($mysqli->connect_error) {
        die("Connection error " . $mysqli->connect_error);
    }

    $category = 'EManagers';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
    JOIN wiki_page ON cl_from = page_id 
    WHERE cl_to = ? AND page_title NOT LIKE 'Ending_Project_Managers%' AND page_title NOT LIKE 'E_P_M%'");
    if (!$stmt) {
        return '<div id="eManagersDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }
    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();

    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>No results.</li>";
    }

    $stmt->close();
    $mysqli->close();

    return '<div id="eManagersDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
}

# general menu
$wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'generalDiv', 'generalMenu' );
    return true;
};

function generalMenu( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);

    if ($mysqli->connect_error) {
        die("Connection error " . $mysqli->connect_error);
    }

    $category = 'General';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
    JOIN wiki_page ON cl_from = page_id 
    WHERE cl_to = ? AND page_title NOT LIKE 'General_Topics%' AND page_title NOT LIKE 'GeneralTemplate%'");
    if (!$stmt) {
        return '<div id="generalDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }
    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();

    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>No results.</li>";
    }

    $stmt->close();
    $mysqli->close();

    return '<div id="generalDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
}

# support
$wgHooks['ParserFirstCallInit'][] = function ( Parser $parser ) {
    $parser->setHook( 'supportDiv', 'supportMenu' );
    return true;
};

function supportMenu( $input, array $args, Parser $parser, PPFrame $frame ) {
    global $wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname, $wgBrowserPath;
    $mysqli = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword, $wgDBname);
  
    if ($mysqli->connect_error) {
        die("Connection error: " . $mysqli->connect_error);
    }
  # vain taulujen nimet saa wiki_ päätteen
    $category = 'Support';
    $stmt = $mysqli->prepare("SELECT page_title FROM wiki_categorylinks 
    JOIN wiki_page ON cl_from = page_id 
    WHERE cl_to = ? AND page_title NOT LIKE 'Support_Topics%' AND page_title NOT LIKE 'SupportTemplate%'");
    if (!$stmt) {
        return '<div id="supportDiv"><ul><li>Database query preparation error: ' . htmlspecialchars($mysqli->error) . '</li></ul>' . htmlspecialchars( $input ) . '</div>';
    }
  
    $stmt->bind_param("s", $category);
    $stmt->execute();
    $result = $stmt->get_result();
  
    $links = '';
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $pageTitle = $row['page_title'];
            $links .= "<li><a href=\"/$wgBrowserPath/index.php/$pageTitle\">$pageTitle</a></li>";
        }
    } else {
        $links = "<li>Ei tuloksia .</li>";
    }
  
    $mysqli->close();
  
    return '<div id="supportDiv"><ul>' . $links . '</ul>' . htmlspecialchars( $input ) . '</div>';
  }
  

## kustomidivit päättyy

#footeri testiä upattu serverille
$wgTweekiSkinSpecialElements['FOOTER'] = 'CustomFooter';#Koodariverstas custom footer (lisätty log in ja edit 19.8.2024)

function CustomFooter( $skin, $context ) {
    global $wgScriptPath;
    echo '<div class="customFooterBlock">
        <div class="footerLinkBlock">
        <a href="https://www.xamk.fi/tietosuoja/" target="_blank" style="margin:5px;"> Koodariverstas privacy policy</a>
        <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en" target="_blank" style="margin:5px;"> Creative Commons License</a> </br>
        <a id="footer-edit-link" href="#" style="margin:5px;">Edit</a></br>
        <a id="footer-login-link" href="#" style="margin:5px;">Login</a></br>
        </div>
        <div class="euLogo"> </div>
        <div class="elyLogo" ></div>
        <div class="xamkLogo" ></div>
    </div>
    <div class="wikiLogo" ></div>';
}

$wgTweekiSkinHideAll['footer-info'] = false;#test
$wgTweekiSkinHideLoggedin['footer-custom'] = false;#test
$wgRightsIcon = null;
#ely logo

$wgTweekiSkinHideAll = [ 'sidebar-right' => true ];
